#!/usr/bin/env bash
set -e # Exit with nonzero exit code if anything fails

SOURCE_BRANCH="master"
TARGET_BRANCH="gh-pages"

# Pull requests and commits to other branches shouldn't try to deploy, just build to verify
if [ "$TRAVIS_PULL_REQUEST" != "false" -o "$TRAVIS_BRANCH" != "$SOURCE_BRANCH" ]; then
    echo "Skipping deploy; just doing a build."
    exit 0
fi

# Save some useful information
REPO=`git config remote.origin.url`
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
SHA=`git rev-parse --verify HEAD`

rm -r gh-pages

echo "-----------------------------------------------"
echo "Cloning the current repository into gh-pages"
echo "-----------------------------------------------"
git clone --depth=50 --branch=gh-pages https://github.com/LousyLynx/On-The-Fly.git gh-pages

echo "-----------------------------------------------"
echo "Compiling the javadoc information"
echo "-----------------------------------------------"
./gradlew javadoc

echo "-----------------------------------------------"
echo "Getting ready to upload the new javadoc"
echo "-----------------------------------------------"
cd gh-pages

git config user.email "mttprvstanddad@gmail.com"
git config user.name "Lousy Lynx"

cp -r ../build/docs/javadoc/** javadoc
git add .
git commit -m "Updating javadoc"

# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc
ENCRYPTED_KEY_VAR="encrypted_${ENCRYPTION_LABEL}_key"
ENCRYPTED_IV_VAR="encrypted_${ENCRYPTION_LABEL}_iv"
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
# The line provided was:
# openssl aes-256-cbc -K $encrypted_f3e8b7e5d5db_key -iv $encrypted_f3e8b7e5d5db_iv -in deploy_key.enc -out deploy_key -d
openssl aes-256-cbc -K ${ENCRYPTED_KEY} -iv ${ENCRYPTED_IV} -in deploy_key.enc -out deploy_key -d
chmod 600 deploy_key
eval `ssh-agent -s`
ssh-add deploy_key

echo "-----------------------------------------------"
echo "Uploading the new javadoc"
echo "-----------------------------------------------"
# Now that we're all set up, we can push.
git push ${SSH_REPO} ${TARGET_BRANCH}

cd ../